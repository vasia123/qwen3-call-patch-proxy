# Configuration for tool call fixes
# Each tool can have multiple fix rules applied

tools:
  todowrite:
    # Fix todos parameter when it's a JSON string instead of array
    fixes:
      - name: "todos_string_to_array"
        parameter: "todos"
        condition: "is_string"
        action: "parse_json_array"
        fallback_value: []
        description: "Convert todos string to array"
  
  bash:
    # Add mandatory description parameter if missing
    fixes:
      - name: "missing_description"
        parameter: "description" 
        condition: "missing_or_empty"
        action: "set_default"
        default_value: "Execute the given shell command"
        description: "Add missing bash description"
  
  edit:
    # Fix replaceAll parameter when it's a string instead of boolean
    fixes:
      - name: "replace_all_string_to_boolean"
        parameter: "replaceAll"
        condition: "is_string"
        action: "convert_string_to_boolean"
        description: "Convert replaceAll string to boolean"
      - name: "replace_all_string_to_boolean_alt"
        parameter: "replace_all"
        condition: "is_string"
        action: "convert_string_to_boolean"
        description: "Convert replace_all string to boolean"
  
  multiedit:
    # Ensure edits parameter is properly formatted
    fixes:
      - name: "edits_validation"
        parameter: "edits"
        condition: "is_string"
        action: "parse_json_array"
        fallback_value: []
        description: "Convert edits string to array"
  
  glob:
    # Add default path if missing
    fixes:
      - name: "default_path"
        parameter: "path"
        condition: "missing"
        action: "set_default"
        default_value: "."
        description: "Add default path for glob"

  grep:
    # Ensure output_mode has valid value
    fixes:
      - name: "output_mode_validation"
        parameter: "output_mode"
        condition: "invalid_enum"
        valid_values: ["content", "files_with_matches", "count"]
        action: "set_default"
        default_value: "files_with_matches"
        description: "Fix invalid output_mode"

  task:
    # Add default subagent_type if missing
    fixes:
      - name: "default_subagent_type"
        parameter: "subagent_type"
        condition: "missing"
        action: "set_default"
        default_value: "general-purpose"
        description: "Add default subagent_type"

  read:
    # Fix read tool when LLM incorrectly provides content parameter
    # This indicates the LLM wants to WRITE, not READ
    fixes:
      - name: "convert_read_with_content_to_write"
        parameter: "content"
        condition: "exists"
        action: "convert_tool_to_write"
        description: "Convert read+content to write tool (LLM means to create file, not read it)"

# Global settings
settings:
  # Timeout for clearing abandoned buffers (seconds)
  buffer_timeout: 120  # Increased to 2 minutes for long tool calls

  # Maximum buffer size per tool call (bytes)
  max_buffer_size: 1048576  # 1MB

  # Enable detailed logging
  detailed_logging: true

  # Case sensitive tool name matching
  case_sensitive_tools: false

  # Legacy API compatibility mode (for models with incorrect HTTP headers)
  legacy_api_mode: false  # Set to true to always use legacy mode

  # Auto-detect legacy API issues and switch to legacy mode automatically
  auto_detect_legacy: true

  # Chunk size for reading in legacy mode (bytes)
  legacy_read_chunk_size: 8192  # 8KB chunks

  # Timeout for reading chunks in legacy mode (seconds)
  legacy_read_timeout: 30

  # List of model names that always use legacy API mode
  # Add your model names here (e.g., "qwen3-235b-it", "qwen-235b")
  legacy_models:
    - "qwen3-235b-it"
    - "qwen-235b"

  # Automatically retry request in legacy mode on ClientPayloadError
  auto_retry_legacy: true